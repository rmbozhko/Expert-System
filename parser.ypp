%{
#include "Node.hpp"
#include  "Tree.hpp"
#include <cstdio>
#include <iostream>
using namespace std;
int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
 
void yyerror(char *s);
%}

%parse-param { std::vector<ast::Tree>& treeStrg }
%parse-param { std::map<std::string, bool>& factsStrg }
%parse-param { std::vector<std::string>& factsOutput }

%union {
    ast::Tree   tree;
    ast::Node   node;
    char        *fact;
}

%token IFOIF AND OR XOR IMPL NOT LPAREN RPAREN

%token <fact> FACT

%type <tree> expression1
%type <node> expression

%left IFOIF
%left IMPL
%left XOR
%left OR
%left AND
%left NOT
%left LPAREN RPAREN

%%
start:
    expressions {}; 
expressions:
    expressions expression1 ENDL { treeStrg.push_back($2); } // do we need both?
    | expression1 ENDL { treeStrg.push_back($1); }; // do we need both?

expression1:
    expression { $$ = ast::Tree($1, factsStrg); }; // try out: expression COMMENT newline

expression:
    NOT expression  { $$ = ast::Node("oper", $1); $$.addChild($2); }
    | expression AND expression { $$ = ast::Node("oper", $2); $$.addChild($1); $$.addChild($3); }
    | expression OR expression { $$ = ast::Node("oper", $2); $$.addChild($1); $$.addChild($3); }
    | expression XOR expression { $$ = ast::Node("oper", $2); $$.addChild($1); $$.addChild($3); }
    | expression IMPL expression { $$ = ast::Node("oper", $2); $$.addChild($1); $$.addChild($3); }
    | expression IFOIF expression { $$ = ast::Node("oper", $2); $$.addChild($1); $$.addChild($3); }
    | LPAREN expression RPAREN { $$ = ast::Node("oper", $2); } // should it work? -> (A), where A is plain fact
    | operand { $$ = ast::Node("fact", $1); }

operand:
    FACT { if ( factsStrg.find($1) == factsStrg.end() )
                factsStrg.insert( std::pair<std::string, bool>($1, false) );
           }
%%
